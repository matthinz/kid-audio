#!/usr/bin/env node

// @ts-check

const fs = require("node:fs/promises");
const path = require("node:path");

const { loadMetadataForFile } = require("../lib/metadata.js");
const {
  ffmpeg,
  ffmpegNormalize,
  ffmpegWavToMp3,
  ffmpegExtractCoverArt,
} = require("../lib/ffmpeg.js");

const WORKING_DIR = ".working";

const METADATA_KEYS_THAT_ARE_NOT_ID3_TAGS = ["__mtime", "setTrack"];

run(process.argv.slice(2)).catch((err) => {
  console.error(err);
});

async function run(files) {
  await files.reduce(
    (promise, file) =>
      promise.then(async () => {
        await processFile(file);
      }),
    Promise.resolve()
  );
}

async function processFile(file) {
  file = path.resolve(file);

  if (!/\.mp3$/.test(file)) {
    throw new Error(`Not an MP3 file: ${file}`);
  }

  const normalizedFile = path.join(
    path.dirname(file),
    WORKING_DIR,
    `${path.basename(file, ".mp3")}.normalized.mp3`
  );

  let needToReplaceFile = false;

  if (await needsUpdate(normalizedFile, file)) {
    // Using input file as a source, re-normalize.
    // This updates the normalizedFile, but does not update the source file
    await doNormalization(file, normalizedFile);
    needToReplaceFile = true;
  }

  const { __mtime: mtime, ...metadata } = await loadMetadataForFile(file);

  if (needToReplaceFile || (await needsUpdate(file, mtime))) {
    // Metadata files are newer than the file, so update the normalized file
    // with new metadata
    const fileMetadata = await getFileMetadata(file, metadata);
    await updateFileMetadata(normalizedFile, fileMetadata);
    needToReplaceFile = true;
  }

  // Replace the file with the updated normalized file
  if (needToReplaceFile) {
    await fs.copyFile(normalizedFile, file);

    // Mark the normalized file as at least as new as the source file
    await fs.utimes(normalizedFile, Date.now(), Date.now());
  }
}

/**
 *
 * @param file {string}
 * @param normalizedFile {string}
 * @returns
 */
async function doNormalization(file, normalizedFile) {
  console.log(`Normalize ${file}`);

  // Ensure we have a backup of the original file
  const [originalFile, coverArtFile] = await Promise.all([
    createOriginalVersion(file),
    extractCoverArt(file),
  ]);

  // Write a .wav file to do audio normalization on, but we don't
  // *overwrite* it if it already exists.

  const wavFile = await createWavVersion(file);

  const normalizedWavFile = await normalizeWavFile(wavFile);

  // Re-convert the wav file to MP3
  const normalizedMp3File = normalizedWavFile.replace(/\.wav$/, ".mp3");

  await ffmpegWavToMp3(normalizedWavFile, normalizedMp3File);

  await Promise.all([fs.unlink(wavFile), fs.unlink(normalizedWavFile)]);

  return normalizedMp3File;
}

/**
 * @param file {string}
 * @returns {Promise<string>}
 */
async function createOriginalVersion(file) {
  const originalFile = path.join(
    path.dirname(file),
    WORKING_DIR,
    path.basename(file).replace(/\.mp3$/, ".original.mp3")
  );

  await fs.mkdir(path.dirname(originalFile), { recursive: true });

  try {
    const stat = await fs.stat(originalFile);
    if (stat.isFile()) {
      return originalFile;
    }
  } catch {}

  console.log("Backing up original file");

  await fs.copyFile(file, originalFile);

  return originalFile;
}

/**
 * @param file {string}
 * @returns {Promise<string>}
 */
async function createWavVersion(file) {
  const wavFile = path.join(
    path.dirname(file),
    WORKING_DIR,
    path.basename(file).replace(/\..*$/, ".wav")
  );

  if (await isFile(wavFile)) {
    return wavFile;
  }

  await fs.mkdir(path.dirname(wavFile), { recursive: true });

  await ffmpeg(["-i", file, "-n", wavFile]);

  return wavFile;
}

/**
 *
 * @param file {string}
 * @returns {Promise<string>}
 */
async function extractCoverArt(file) {
  const coverArtFile = path.join(
    path.dirname(file),
    WORKING_DIR,
    path.basename(file).replace(/\..*$/, ".cover.png")
  );

  await fs.mkdir(path.dirname(coverArtFile), { recursive: true });

  await ffmpegExtractCoverArt(file, coverArtFile);

  return coverArtFile;
}

/**
 * Performs 2-pass audio normalization on the given WAV file.
 * @param file {string}
 * @returns {Promise<string>} The normalized file name
 */
async function normalizeWavFile(file) {
  const normalizedFile = file.replace(/\.wav$/, ".normalized.wav");

  if (await isFile(normalizedFile)) {
    return normalizedFile;
  }

  console.log("Normalizing audio levels...");

  await ffmpegNormalize(file, normalizedFile);

  return normalizedFile;
}

async function needsUpdate(file, destFileOrMTime) {
  let mtime;

  if (typeof destFileOrMTime === "string") {
    let destStat;

    try {
      destStat = await fs.stat(destFileOrMTime);
    } catch (err) {
      if (err.code === "ENOENT") {
        return true;
      }
      throw err;
    }
    mtime = destStat.mtime;
  } else if (destFileOrMTime instanceof Date) {
    mtime = destFileOrMTime;
  } else {
    throw new Error(`Invalid argument: ${destFileOrMTime}`);
  }

  let stat;

  try {
    stat = await fs.stat(file);
  } catch (err) {
    if (err.code != "ENOENT") {
      throw err;
    }
  }

  return !stat || stat.mtime < mtime;
}

function buildFfmpegId3Args(inputFile, outputFile, metadata) {
  const args = [
    "-y", // overwrite output files
    "-i",
    inputFile,
  ];

  Object.keys(metadata).forEach((key) => {
    if (METADATA_KEYS_THAT_ARE_NOT_ID3_TAGS.includes(key)) {
      return;
    }
    args.push("-metadata", `${key}=${metadata[key]}`);
  });

  args.push(outputFile);

  return args;
}

async function getFileMetadata(file, metadata) {
  const title = path.basename(file, ".mp3");

  const allFiles = (await fs.readdir(path.dirname(file)))
    .filter((f) => /\.mp3$/.test(f))
    .sort();

  const result = Object.assign({}, metadata, {
    title,
  });

  if (metadata.setTrack !== false) {
    const track = allFiles.findIndex((f) => path.basename(file) === f) + 1;

    if (track > 0) {
      result.track = `${track}/${allFiles.length}`;
    }

    result.disc = result.disc ?? 1;
  }

  delete result.setTrack;

  return result;
}

async function updateFileMetadata(file, metadata) {
  console.log(`Update metadata for ${file}: ${JSON.stringify(metadata)}`);

  const outputFile = path.join(path.dirname(file), ".temp.mp3");

  const args = buildFfmpegId3Args(file, outputFile, metadata);

  await ffmpeg(args);

  await fs.rename(outputFile, file);

  const coverArtFile = path.join(
    path.dirname(file),
    path.basename(file).replace(/\..+/, ".cover.png")
  );

  await ffmpeg([
    "-i",
    file,
    "-i",
    coverArtFile,
    "-map",
    "0:0",
    "-map",
    "1:0",
    "-codec",
    "copy",
    "-id3v2_version",
    "3",
    "-metadata:s:v",
    "title=Album cover",
    "-metadata:s:v",
    "comment=Cover (front)",
    outputFile,
  ]);

  await fs.rename(outputFile, file);
}

/**
 *
 * @param file {string}
 * @returns {Promise<boolean>}
 */
async function isFile(file) {
  try {
    return (await fs.stat(file)).isFile();
  } catch (err) {
    if (err.code !== "ENOENT") {
      throw err;
    }
    return false;
  }
}
